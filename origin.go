package views

import (
	"fmt"
	"html/template"
	"net"
	"os"
	"strings"

	"github.com/coredns/coredns/plugin"
)

const originDBTmpl = `;Generated by CoreDNS/views plugin

$ORIGIN {{ normalize .Name }}
$TTL {{ .DefaultTTL }}

@ IN SOA {{ normalize .SOA.MName }} {{ normalize .SOA.RName }} ( {{ .SOA.Serial }} {{ .SOA.Refresh }} {{ .SOA.Retry }} {{ .SOA.Expire }} {{ .SOA.NegativeCacheTTL }} )

{{ range .Records }}
{{- .Name }} {{ .TTL }} {{ .QClass }} {{ .QType }} {{ normalize .Value }}
{{ end }}
`

// Origin represent of zone origin following on RFC 1035-style
type Origin struct {
	Name       string
	DefaultTTL uint32
	SOA        SOA
	Records    []Record
}

// Render implement rendering zone file from origin data
func (o *Origin) Render(path string) {
	if strings.HasSuffix(path, "/") {
		path = path[:len(path)-1]
	}

	funcMap := template.FuncMap{
		"normalize": normalize,
	}

	tmpl := template.Must(template.New("origin").Funcs(funcMap).Parse(originDBTmpl))

	f, err := os.Create(fmt.Sprintf("%s/db.%s", path, o.Name))
	if err != nil {
		log.Error(err)
	}
	defer f.Close()

	err = tmpl.Execute(f, o)
	if err != nil {
		log.Error(err)
	}
}

func normalize(host string) string {
	if net.ParseIP(host) != nil {
		return host
	}
	return plugin.Host(host).Normalize()
}
